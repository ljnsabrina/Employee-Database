
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ljn
 */
public class MainMenu extends javax.swing.JFrame
{
    
    //create a hash table to store the employee information
    OpenHashTable theTable = new OpenHashTable(2);

    /**
     * Creates new form NewJFrame
     */
    
    //initialize the mainmenu to show only the main panel
    public MainMenu()
    {
        initComponents();
        setSize(600, 470);
        loginPan.setVisible(true);
        mainPan.setVisible(false);
        loadSuccessNotice.setVisible(false);
        savedSuccessNotice.setVisible(false);
        errorInFileNoticeLabel.setVisible(false);
        addPan.setVisible(false);
        removePan.setVisible(false);
        searchPan.setVisible(false);
        displayPan.setVisible(false);
        modifyPan.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        genderSelectionRadButGroup = new javax.swing.ButtonGroup();
        empTypeSelectionRadButGroup = new javax.swing.ButtonGroup();
        mainPan = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        addBut = new javax.swing.JButton();
        removeBut = new javax.swing.JButton();
        searchBut = new javax.swing.JButton();
        displayBut = new javax.swing.JButton();
        modifyBut = new javax.swing.JButton();
        loadBut = new javax.swing.JButton();
        exitBut = new javax.swing.JButton();
        loadSuccessNotice = new javax.swing.JLabel();
        savedSuccessNotice = new javax.swing.JLabel();
        errorInFileNoticeLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        picture = new javax.swing.JLabel();
        addPan = new javax.swing.JPanel();
        homeButFromAddPan = new javax.swing.JButton();
        addTitle = new javax.swing.JLabel();
        empNumLabel = new javax.swing.JLabel();
        empNumInput = new javax.swing.JFormattedTextField();
        fNameLabel = new javax.swing.JLabel();
        fNameInput = new javax.swing.JTextField();
        lNameLabel = new javax.swing.JLabel();
        lNameInput = new javax.swing.JTextField();
        sexLabel = new javax.swing.JLabel();
        maleRadBut = new javax.swing.JRadioButton();
        femaleRadBut = new javax.swing.JRadioButton();
        otherRadBut = new javax.swing.JRadioButton();
        workLocationLabel = new javax.swing.JLabel();
        workLocationDropdown = new javax.swing.JComboBox<>();
        fullTimeRadBut = new javax.swing.JRadioButton();
        partTimeRadBut = new javax.swing.JRadioButton();
        deductionsRateLabel = new javax.swing.JLabel();
        deductionsRateInput = new javax.swing.JFormattedTextField();
        saveButFromAddPan = new javax.swing.JButton();
        cancelButFromAddPan = new javax.swing.JButton();
        employeeTypeLabel = new javax.swing.JLabel();
        fullTimeInputsPan = new javax.swing.JPanel();
        hourlyWageLabel = new javax.swing.JLabel();
        hoursPerWeekLabel = new javax.swing.JLabel();
        weeksPerYearLabel = new javax.swing.JLabel();
        hourlyWageInput = new javax.swing.JFormattedTextField();
        hoursPerWeekInput = new javax.swing.JFormattedTextField();
        weeksPerYearInput = new javax.swing.JFormattedTextField();
        partTimeInputsPan = new javax.swing.JPanel();
        annualSalaryLabel = new javax.swing.JLabel();
        annualSalaryInput = new javax.swing.JFormattedTextField();
        exitBut1 = new javax.swing.JButton();
        empExistNotice = new javax.swing.JLabel();
        percentSymbolLabel = new javax.swing.JLabel();
        saveSuccessNotice = new javax.swing.JLabel();
        notFilledErrorMessage = new javax.swing.JLabel();
        removePan = new javax.swing.JPanel();
        removeTitle = new javax.swing.JLabel();
        homeButFromRemovePan = new javax.swing.JButton();
        removeSuccessNotice = new javax.swing.JLabel();
        employeeNumberLabel = new javax.swing.JLabel();
        empNumRemoveSearchInput = new javax.swing.JTextField();
        removeNoteLabel = new javax.swing.JLabel();
        note2Label = new javax.swing.JLabel();
        searchButToRemove = new javax.swing.JButton();
        exitBut2 = new javax.swing.JButton();
        notFoundLabel = new javax.swing.JLabel();
        removeResultPan = new javax.swing.JPanel();
        removeNoBut = new javax.swing.JButton();
        removeYesBut = new javax.swing.JButton();
        removeConfirmLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outPutTable1 = new javax.swing.JTable();
        searchPan = new javax.swing.JPanel();
        searchTitle1 = new javax.swing.JLabel();
        homeButFromRemovePan1 = new javax.swing.JButton();
        employeeNumberLabel1 = new javax.swing.JLabel();
        empNumSearchInput = new javax.swing.JTextField();
        searchNoteLabel1 = new javax.swing.JLabel();
        note2Label1 = new javax.swing.JLabel();
        searchButToRemove1 = new javax.swing.JButton();
        exitBut3 = new javax.swing.JButton();
        notFoundLabelSearchPan = new javax.swing.JLabel();
        searchResultPan = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        outPutTable2 = new javax.swing.JTable();
        displayPan = new javax.swing.JPanel();
        exitBut5 = new javax.swing.JButton();
        diaplayTitle = new javax.swing.JLabel();
        homeButFromRemovePan2 = new javax.swing.JButton();
        exitBut4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outPutTable = new javax.swing.JTable();
        modifyPan = new javax.swing.JPanel();
        homeButFromAddPan1 = new javax.swing.JButton();
        empNumLabel1 = new javax.swing.JLabel();
        fNameLabel1 = new javax.swing.JLabel();
        fNameInput1 = new javax.swing.JTextField();
        lNameLabel1 = new javax.swing.JLabel();
        lNameInput1 = new javax.swing.JTextField();
        sexLabel1 = new javax.swing.JLabel();
        maleRadBut1 = new javax.swing.JRadioButton();
        femaleRadBut1 = new javax.swing.JRadioButton();
        otherRadBut1 = new javax.swing.JRadioButton();
        workLocationLabel1 = new javax.swing.JLabel();
        workLocationDropdown1 = new javax.swing.JComboBox<>();
        fullTimeRadBut1 = new javax.swing.JRadioButton();
        partTimeRadBut1 = new javax.swing.JRadioButton();
        deductionsRateLabel1 = new javax.swing.JLabel();
        deductionsRateInput1 = new javax.swing.JFormattedTextField();
        saveButFromAddPan1 = new javax.swing.JButton();
        cancelButFromAddPan1 = new javax.swing.JButton();
        employeeTypeLabel1 = new javax.swing.JLabel();
        partTimeInputsPan1 = new javax.swing.JPanel();
        hourlyWageLabel1 = new javax.swing.JLabel();
        hoursPerWeekLabel1 = new javax.swing.JLabel();
        weeksPerYearLabel1 = new javax.swing.JLabel();
        hourlyWageInput1 = new javax.swing.JFormattedTextField();
        hoursPerWeekInput1 = new javax.swing.JFormattedTextField();
        weeksPerYearInput1 = new javax.swing.JFormattedTextField();
        fullTimeInputsPan1 = new javax.swing.JPanel();
        annualSalaryLabel1 = new javax.swing.JLabel();
        annualSalaryInput1 = new javax.swing.JFormattedTextField();
        exitBut6 = new javax.swing.JButton();
        empExistNotice1 = new javax.swing.JLabel();
        percentSymbolLabel1 = new javax.swing.JLabel();
        saveSuccessNotice1 = new javax.swing.JLabel();
        modifyTitle = new javax.swing.JLabel();
        notFilledErrorMessage1 = new javax.swing.JLabel();
        empNumModifyLabel = new javax.swing.JLabel();
        loginPan = new javax.swing.JPanel();
        pleaseLoginLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameInput = new javax.swing.JTextField();
        loginBut = new javax.swing.JButton();
        loginCancelBut = new javax.swing.JButton();
        passwordInput = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1024, 768));
        setMinimumSize(new java.awt.Dimension(600, 450));
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPan.setMaximumSize(new java.awt.Dimension(600, 450));
        mainPan.setMinimumSize(new java.awt.Dimension(600, 450));
        mainPan.setPreferredSize(new java.awt.Dimension(600, 450));
        mainPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Title.setFont(new java.awt.Font("Arial", 1, 25)); // NOI18N
        Title.setText("Employee Database System");
        mainPan.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 360, 40));

        addBut.setText("Add");
        addBut.setMaximumSize(new java.awt.Dimension(50, 20));
        addBut.setMinimumSize(new java.awt.Dimension(50, 20));
        addBut.setPreferredSize(new java.awt.Dimension(50, 20));
        addBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedAddFromMainPan(evt);
            }
        });
        mainPan.add(addBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 120, 60));

        removeBut.setText("Remove");
        removeBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedRemoveFromMainPan(evt);
            }
        });
        mainPan.add(removeBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, 120, 60));

        searchBut.setText("Search");
        searchBut.setMaximumSize(new java.awt.Dimension(50, 20));
        searchBut.setMinimumSize(new java.awt.Dimension(50, 20));
        searchBut.setPreferredSize(new java.awt.Dimension(50, 20));
        searchBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedSearchButFromMainPan(evt);
            }
        });
        mainPan.add(searchBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 120, 60));

        displayBut.setText("Display");
        displayBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedDisplayButFromMainPan(evt);
            }
        });
        mainPan.add(displayBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 200, 120, 60));

        modifyBut.setText("Save");
        modifyBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedSaveButActionFromMainPan(evt);
            }
        });
        mainPan.add(modifyBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 120, 60));

        loadBut.setText("Load");
        loadBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedLoadButFromMainPan(evt);
            }
        });
        mainPan.add(loadBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 120, 60));

        exitBut.setText("Exit");
        exitBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedExitButFromMainPan(evt);
            }
        });
        mainPan.add(exitBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, -1, -1));

        loadSuccessNotice.setText("The employee info has been retrieved from the text file!");
        mainPan.add(loadSuccessNotice, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 360, -1, -1));

        savedSuccessNotice.setText("The employee info has been saved to the file!");
        mainPan.add(savedSuccessNotice, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, 20));

        errorInFileNoticeLabel.setText("The file format is not correct or the file doesn't exist");
        mainPan.add(errorInFileNoticeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, -1, -1));

        jButton1.setText("Help");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedHelpFromMainPan(evt);
            }
        });
        mainPan.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 380, -1, -1));

        picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Little Man.jpg"))); // NOI18N
        mainPan.add(picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, -10, 470, 420));

        getContentPane().add(mainPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        addPan.setMaximumSize(new java.awt.Dimension(600, 450));
        addPan.setMinimumSize(new java.awt.Dimension(600, 450));
        addPan.setPreferredSize(new java.awt.Dimension(600, 450));
        addPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeButFromAddPan.setText("Home");
        homeButFromAddPan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedHomeButFromAddPan(evt);
            }
        });
        addPan.add(homeButFromAddPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        addTitle.setFont(new java.awt.Font("Arial", 1, 25)); // NOI18N
        addTitle.setText("Add");
        addPan.add(addTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, -1, -1));

        empNumLabel.setText("Employee Number:");
        addPan.add(empNumLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, 20));

        empNumInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#+0"))));
        addPan.add(empNumInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 140, 30));

        fNameLabel.setText("First Name:");
        addPan.add(fNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 90, 20));
        addPan.add(fNameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 140, -1));

        lNameLabel.setText("Last Name:");
        addPan.add(lNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 90, 20));
        addPan.add(lNameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 140, -1));

        sexLabel.setText("Sex:");
        addPan.add(sexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 40, 20));

        genderSelectionRadButGroup.add(maleRadBut);
        maleRadBut.setText("Male");
        addPan.add(maleRadBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, -1, -1));

        genderSelectionRadButGroup.add(femaleRadBut);
        femaleRadBut.setText("Female");
        addPan.add(femaleRadBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, -1, -1));

        genderSelectionRadButGroup.add(otherRadBut);
        otherRadBut.setText("Other");
        addPan.add(otherRadBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 150, -1, -1));

        workLocationLabel.setText("Work Location:");
        addPan.add(workLocationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 120, 20));

        workLocationDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Mississauga", "Ottawa", "Chicago" }));
        addPan.add(workLocationDropdown, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, -1, -1));

        empTypeSelectionRadButGroup.add(fullTimeRadBut);
        fullTimeRadBut.setText("Full Time");
        fullTimeRadBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fullTimeRadButClicked(evt);
            }
        });
        addPan.add(fullTimeRadBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, -1, -1));

        empTypeSelectionRadButGroup.add(partTimeRadBut);
        partTimeRadBut.setText("Part Time");
        partTimeRadBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                partTimeRadButClicked(evt);
            }
        });
        addPan.add(partTimeRadBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, -1, -1));

        deductionsRateLabel.setText("Deductions Rate:");
        addPan.add(deductionsRateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 160, 20));

        deductionsRateInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00"))));
        addPan.add(deductionsRateInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 70, -1));

        saveButFromAddPan.setText("Save");
        saveButFromAddPan.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                mouseExitSaveButAddPan(evt);
            }
        });
        saveButFromAddPan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedSaveButFromAddPan(evt);
            }
        });
        addPan.add(saveButFromAddPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 70, -1));

        cancelButFromAddPan.setText("Cancel");
        cancelButFromAddPan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedCanelButFromAddPan(evt);
            }
        });
        addPan.add(cancelButFromAddPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, -1, -1));

        employeeTypeLabel.setText("Employee Type:");
        addPan.add(employeeTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 130, 20));

        fullTimeInputsPan.setMaximumSize(new java.awt.Dimension(200, 200));

        hourlyWageLabel.setText("Hourly Wage:");

        hoursPerWeekLabel.setText("Hours Per Week:");

        weeksPerYearLabel.setText("Weeks Per Year:");

        hourlyWageInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        hoursPerWeekInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        weeksPerYearInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        javax.swing.GroupLayout fullTimeInputsPanLayout = new javax.swing.GroupLayout(fullTimeInputsPan);
        fullTimeInputsPan.setLayout(fullTimeInputsPanLayout);
        fullTimeInputsPanLayout.setHorizontalGroup(
            fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeInputsPanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(hourlyWageInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fullTimeInputsPanLayout.createSequentialGroup()
                            .addComponent(weeksPerYearLabel)
                            .addGap(24, 24, 24)
                            .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(weeksPerYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hoursPerWeekInput, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(hourlyWageLabel)
                        .addComponent(hoursPerWeekLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fullTimeInputsPanLayout.setVerticalGroup(
            fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeInputsPanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourlyWageLabel)
                    .addComponent(hourlyWageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursPerWeekInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursPerWeekLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fullTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weeksPerYearLabel)
                    .addComponent(weeksPerYearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        addPan.add(fullTimeInputsPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 230, 120));

        annualSalaryLabel.setText("Annual Salary:");

        annualSalaryInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        javax.swing.GroupLayout partTimeInputsPanLayout = new javax.swing.GroupLayout(partTimeInputsPan);
        partTimeInputsPan.setLayout(partTimeInputsPanLayout);
        partTimeInputsPanLayout.setHorizontalGroup(
            partTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeInputsPanLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(annualSalaryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(annualSalaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );
        partTimeInputsPanLayout.setVerticalGroup(
            partTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeInputsPanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(partTimeInputsPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annualSalaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annualSalaryLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addPan.add(partTimeInputsPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 240, 50));

        exitBut1.setText("Exit");
        exitBut1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitBut1ActionPerformed(evt);
            }
        });
        addPan.add(exitBut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, -1, -1));

        empExistNotice.setForeground(new java.awt.Color(255, 0, 51));
        empExistNotice.setText("No need to add, the employee already exist in the database!");
        addPan.add(empExistNotice, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 390, 330, 30));

        percentSymbolLabel.setText("%");
        addPan.add(percentSymbolLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, -1, -1));

        saveSuccessNotice.setForeground(new java.awt.Color(255, 0, 51));
        saveSuccessNotice.setText("The employee info are saved successfully!");
        addPan.add(saveSuccessNotice, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, -1, -1));

        notFilledErrorMessage.setForeground(new java.awt.Color(255, 0, 0));
        notFilledErrorMessage.setText("The fields are not filled out correctly");
        addPan.add(notFilledErrorMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 330, 20));

        getContentPane().add(addPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 450));

        removePan.setMaximumSize(new java.awt.Dimension(1280, 960));
        removePan.setMinimumSize(new java.awt.Dimension(600, 450));
        removePan.setPreferredSize(new java.awt.Dimension(1280, 960));
        removePan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeTitle.setFont(new java.awt.Font("Arial", 1, 25)); // NOI18N
        removeTitle.setText("Remove");
        removePan.add(removeTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 32, -1, -1));

        homeButFromRemovePan.setText("Home");
        homeButFromRemovePan.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                homeButFromRemovePanclicked(evt);
            }
        });
        removePan.add(homeButFromRemovePan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        removeSuccessNotice.setForeground(new java.awt.Color(255, 0, 0));
        removeSuccessNotice.setText("The employee has been removed successfully!");
        removePan.add(removeSuccessNotice, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 360, 30));

        employeeNumberLabel.setText("Employee Number:");
        removePan.add(employeeNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 84, -1, -1));
        removePan.add(empNumRemoveSearchInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 80, -1));

        removeNoteLabel.setText("* You must enter the exact employee number.");
        removePan.add(removeNoteLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 112, -1, -1));

        note2Label.setText(" Otherwise it will not find the employee.");
        removePan.add(note2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 132, -1, -1));

        searchButToRemove.setText("Search");
        searchButToRemove.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedSearchButToRemove(evt);
            }
        });
        removePan.add(searchButToRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, -1, -1));

        exitBut2.setText("Exit");
        exitBut2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitBut2ActionPerformed(evt);
            }
        });
        removePan.add(exitBut2, new org.netbeans.lib.awtextra.AbsoluteConstraints(483, 40, -1, -1));

        notFoundLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        notFoundLabel.setText("* The employee is not in the database.");
        removePan.add(notFoundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 309, 20));

        removeResultPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeNoBut.setText("No");
        removeNoBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedNoButFromRemovePan(evt);
            }
        });
        removeResultPan.add(removeNoBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, -1, -1));

        removeYesBut.setText("Yes");
        removeYesBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedYesButFromRemovePan(evt);
            }
        });
        removeResultPan.add(removeYesBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, -1, -1));

        removeConfirmLabel.setText("Are you sure to remove the employee?");
        removeResultPan.add(removeConfirmLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 290, -1));

        outPutTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Emp Number", "First Name", "Last Name", "Sex", "Work Location", "Deductions Rate", "Full Time", "Part Time", "Annual Salary", "Hourly Wage", "Hours Per Week", "Weeks Per year", "Annual Income"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        outPutTable1.setMaximumSize(new java.awt.Dimension(1024, 768));
        outPutTable1.setPreferredSize(new java.awt.Dimension(1280, 960));
        jScrollPane2.setViewportView(outPutTable1);
        if (outPutTable1.getColumnModel().getColumnCount() > 0)
        {
            outPutTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            outPutTable1.getColumnModel().getColumn(1).setPreferredWidth(45);
            outPutTable1.getColumnModel().getColumn(2).setPreferredWidth(45);
            outPutTable1.getColumnModel().getColumn(3).setPreferredWidth(15);
            outPutTable1.getColumnModel().getColumn(4).setPreferredWidth(55);
            outPutTable1.getColumnModel().getColumn(5).setPreferredWidth(45);
            outPutTable1.getColumnModel().getColumn(6).setPreferredWidth(15);
            outPutTable1.getColumnModel().getColumn(7).setPreferredWidth(15);
            outPutTable1.getColumnModel().getColumn(8).setPreferredWidth(45);
            outPutTable1.getColumnModel().getColumn(9).setPreferredWidth(35);
            outPutTable1.getColumnModel().getColumn(10).setPreferredWidth(40);
            outPutTable1.getColumnModel().getColumn(11).setPreferredWidth(45);
            outPutTable1.getColumnModel().getColumn(12).setPreferredWidth(40);
        }

        removeResultPan.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1250, 100));

        removePan.add(removeResultPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 1270, 190));

        getContentPane().add(removePan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 960));

        searchPan.setMaximumSize(new java.awt.Dimension(1280, 960));
        searchPan.setMinimumSize(new java.awt.Dimension(600, 450));
        searchPan.setPreferredSize(new java.awt.Dimension(1280, 960));
        searchPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchTitle1.setFont(new java.awt.Font("Arial", 1, 25)); // NOI18N
        searchTitle1.setText("Search");
        searchPan.add(searchTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 32, -1, -1));

        homeButFromRemovePan1.setText("Home");
        homeButFromRemovePan1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedHomeButFromSearchPan(evt);
            }
        });
        searchPan.add(homeButFromRemovePan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        employeeNumberLabel1.setText("Employee Number:");
        searchPan.add(employeeNumberLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 84, -1, -1));
        searchPan.add(empNumSearchInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 80, -1));

        searchNoteLabel1.setText("* You must enter the exact employee number.");
        searchPan.add(searchNoteLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 112, -1, -1));

        note2Label1.setText(" Otherwise it will not find the employee.");
        searchPan.add(note2Label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 132, -1, -1));

        searchButToRemove1.setText("Search");
        searchButToRemove1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedSearchButFromSearchPan(evt);
            }
        });
        searchPan.add(searchButToRemove1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, -1, -1));

        exitBut3.setText("Exit");
        exitBut3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitBut3ActionPerformed(evt);
            }
        });
        searchPan.add(exitBut3, new org.netbeans.lib.awtextra.AbsoluteConstraints(483, 40, -1, -1));

        notFoundLabelSearchPan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        notFoundLabelSearchPan.setText("* The employee is not in the database.");
        searchPan.add(notFoundLabelSearchPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 309, 20));

        searchResultPan.setMinimumSize(new java.awt.Dimension(1280, 110));
        searchResultPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        outPutTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Emp Number", "First Name", "Last Name", "Sex", "Work Location", "Deductions Rate", "Full Time", "Part Time", "Annual Salary", "Hourly Wage", "Hours Per Week", "Weeks Per year", "Annual Income"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        outPutTable2.setMaximumSize(new java.awt.Dimension(1024, 768));
        outPutTable2.setPreferredSize(new java.awt.Dimension(1280, 960));
        jScrollPane3.setViewportView(outPutTable2);
        if (outPutTable2.getColumnModel().getColumnCount() > 0)
        {
            outPutTable2.getColumnModel().getColumn(0).setPreferredWidth(40);
            outPutTable2.getColumnModel().getColumn(1).setPreferredWidth(45);
            outPutTable2.getColumnModel().getColumn(2).setPreferredWidth(45);
            outPutTable2.getColumnModel().getColumn(3).setPreferredWidth(15);
            outPutTable2.getColumnModel().getColumn(4).setPreferredWidth(55);
            outPutTable2.getColumnModel().getColumn(5).setPreferredWidth(45);
            outPutTable2.getColumnModel().getColumn(6).setPreferredWidth(15);
            outPutTable2.getColumnModel().getColumn(7).setPreferredWidth(15);
            outPutTable2.getColumnModel().getColumn(8).setPreferredWidth(45);
            outPutTable2.getColumnModel().getColumn(9).setPreferredWidth(35);
            outPutTable2.getColumnModel().getColumn(10).setPreferredWidth(40);
            outPutTable2.getColumnModel().getColumn(11).setPreferredWidth(45);
            outPutTable2.getColumnModel().getColumn(12).setPreferredWidth(40);
        }

        searchResultPan.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1250, 100));

        searchPan.add(searchResultPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 1270, 190));

        getContentPane().add(searchPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 960));

        displayPan.setMaximumSize(new java.awt.Dimension(1024, 768));
        displayPan.setMinimumSize(new java.awt.Dimension(600, 450));
        displayPan.setPreferredSize(new java.awt.Dimension(1280, 960));
        displayPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        exitBut5.setText("Exit");
        exitBut5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitBut5ActionPerformed(evt);
            }
        });
        displayPan.add(exitBut5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 20, -1, -1));

        diaplayTitle.setFont(new java.awt.Font("Arial", 1, 25)); // NOI18N
        diaplayTitle.setText("Display");
        displayPan.add(diaplayTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        homeButFromRemovePan2.setText("Home");
        homeButFromRemovePan2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedHomeButFromDisplayPan(evt);
            }
        });
        displayPan.add(homeButFromRemovePan2, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 27, -1, -1));

        exitBut4.setText("Exit");
        exitBut4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitBut4ActionPerformed(evt);
            }
        });
        displayPan.add(exitBut4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1830, 27, -1, -1));

        outPutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Emp Number", "First Name", "Last Name", "Sex", "Work Location", "Deductions Rate", "Full Time", "Part Time", "Annual Salary", "Hourly Wage", "Hours Per Week", "Weeks Per year", "Annual Income"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        outPutTable.setMaximumSize(new java.awt.Dimension(1024, 768));
        outPutTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                outPutTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(outPutTable);
        if (outPutTable.getColumnModel().getColumnCount() > 0)
        {
            outPutTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            outPutTable.getColumnModel().getColumn(1).setPreferredWidth(45);
            outPutTable.getColumnModel().getColumn(2).setPreferredWidth(45);
            outPutTable.getColumnModel().getColumn(3).setPreferredWidth(15);
            outPutTable.getColumnModel().getColumn(4).setPreferredWidth(55);
            outPutTable.getColumnModel().getColumn(5).setPreferredWidth(45);
            outPutTable.getColumnModel().getColumn(6).setPreferredWidth(15);
            outPutTable.getColumnModel().getColumn(7).setPreferredWidth(15);
            outPutTable.getColumnModel().getColumn(8).setPreferredWidth(45);
            outPutTable.getColumnModel().getColumn(9).setPreferredWidth(35);
            outPutTable.getColumnModel().getColumn(10).setPreferredWidth(40);
            outPutTable.getColumnModel().getColumn(11).setPreferredWidth(45);
            outPutTable.getColumnModel().getColumn(12).setPreferredWidth(40);
        }

        displayPan.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1250, 700));

        getContentPane().add(displayPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 960));

        modifyPan.setMaximumSize(new java.awt.Dimension(600, 450));
        modifyPan.setMinimumSize(new java.awt.Dimension(600, 450));
        modifyPan.setPreferredSize(new java.awt.Dimension(600, 450));
        modifyPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeButFromAddPan1.setText("Home");
        homeButFromAddPan1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedHomeButFromModifyPan(evt);
            }
        });
        modifyPan.add(homeButFromAddPan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        empNumLabel1.setText("Employee Number:");
        modifyPan.add(empNumLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, 20));

        fNameLabel1.setText("First Name:");
        modifyPan.add(fNameLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 90, 20));
        modifyPan.add(fNameInput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 140, -1));

        lNameLabel1.setText("Last Name:");
        modifyPan.add(lNameLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 90, 20));
        modifyPan.add(lNameInput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 140, -1));

        sexLabel1.setText("Sex:");
        modifyPan.add(sexLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 40, 20));

        genderSelectionRadButGroup.add(maleRadBut1);
        maleRadBut1.setText("Male");
        modifyPan.add(maleRadBut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, -1, -1));

        genderSelectionRadButGroup.add(femaleRadBut1);
        femaleRadBut1.setText("Female");
        modifyPan.add(femaleRadBut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, -1, -1));

        genderSelectionRadButGroup.add(otherRadBut1);
        otherRadBut1.setText("Other");
        modifyPan.add(otherRadBut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 150, -1, -1));

        workLocationLabel1.setText("Work Location:");
        modifyPan.add(workLocationLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 120, 20));

        workLocationDropdown1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Mississauga", "Ottawa", "Chicago" }));
        modifyPan.add(workLocationDropdown1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, -1, -1));

        empTypeSelectionRadButGroup.add(fullTimeRadBut1);
        fullTimeRadBut1.setText("Full Time");
        fullTimeRadBut1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedFullTimeRadBut1FromModifyPan(evt);
            }
        });
        modifyPan.add(fullTimeRadBut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, -1, -1));

        empTypeSelectionRadButGroup.add(partTimeRadBut1);
        partTimeRadBut1.setText("Part Time");
        partTimeRadBut1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedPartTimeRadButFromModifyPan(evt);
            }
        });
        modifyPan.add(partTimeRadBut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, -1, -1));

        deductionsRateLabel1.setText("Deductions Rate:");
        modifyPan.add(deductionsRateLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 160, 20));

        deductionsRateInput1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00"))));
        modifyPan.add(deductionsRateInput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 70, -1));

        saveButFromAddPan1.setText("Save");
        saveButFromAddPan1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedSaveButFromModifyPan(evt);
            }
        });
        modifyPan.add(saveButFromAddPan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 70, -1));

        cancelButFromAddPan1.setText("Cancel");
        cancelButFromAddPan1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedCancelButFromModifyPan(evt);
            }
        });
        modifyPan.add(cancelButFromAddPan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, -1, -1));

        employeeTypeLabel1.setText("Employee Type:");
        modifyPan.add(employeeTypeLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 130, 20));

        partTimeInputsPan1.setMaximumSize(new java.awt.Dimension(200, 200));

        hourlyWageLabel1.setText("Hourly Wage:");

        hoursPerWeekLabel1.setText("Hours Per Week:");

        weeksPerYearLabel1.setText("Weeks Per Year:");

        hourlyWageInput1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        hoursPerWeekInput1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        weeksPerYearInput1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        javax.swing.GroupLayout partTimeInputsPan1Layout = new javax.swing.GroupLayout(partTimeInputsPan1);
        partTimeInputsPan1.setLayout(partTimeInputsPan1Layout);
        partTimeInputsPan1Layout.setHorizontalGroup(
            partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeInputsPan1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(hourlyWageInput1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, partTimeInputsPan1Layout.createSequentialGroup()
                            .addComponent(weeksPerYearLabel1)
                            .addGap(24, 24, 24)
                            .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(weeksPerYearInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hoursPerWeekInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(hourlyWageLabel1)
                        .addComponent(hoursPerWeekLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        partTimeInputsPan1Layout.setVerticalGroup(
            partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeInputsPan1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourlyWageLabel1)
                    .addComponent(hourlyWageInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursPerWeekInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursPerWeekLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(partTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weeksPerYearLabel1)
                    .addComponent(weeksPerYearInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        modifyPan.add(partTimeInputsPan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 230, 120));

        annualSalaryLabel1.setText("Annual Salary:");

        annualSalaryInput1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        javax.swing.GroupLayout fullTimeInputsPan1Layout = new javax.swing.GroupLayout(fullTimeInputsPan1);
        fullTimeInputsPan1.setLayout(fullTimeInputsPan1Layout);
        fullTimeInputsPan1Layout.setHorizontalGroup(
            fullTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeInputsPan1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(annualSalaryLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(annualSalaryInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        fullTimeInputsPan1Layout.setVerticalGroup(
            fullTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeInputsPan1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fullTimeInputsPan1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annualSalaryInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annualSalaryLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modifyPan.add(fullTimeInputsPan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 240, 50));

        exitBut6.setText("Exit");
        exitBut6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitBut6ActionPerformed(evt);
            }
        });
        modifyPan.add(exitBut6, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, -1, -1));

        empExistNotice1.setForeground(new java.awt.Color(255, 0, 51));
        empExistNotice1.setText("No changes were made to existing employee data");
        modifyPan.add(empExistNotice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 480, 30));

        percentSymbolLabel1.setText("%");
        modifyPan.add(percentSymbolLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, -1, -1));

        saveSuccessNotice1.setForeground(new java.awt.Color(255, 0, 51));
        saveSuccessNotice1.setText("The employee info are changed successfully!");
        modifyPan.add(saveSuccessNotice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, -1, -1));

        modifyTitle.setFont(new java.awt.Font("Arial", 1, 25)); // NOI18N
        modifyTitle.setText("Modify");
        modifyPan.add(modifyTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        notFilledErrorMessage1.setForeground(new java.awt.Color(255, 0, 0));
        notFilledErrorMessage1.setText("The fields are not filled out correctly");
        modifyPan.add(notFilledErrorMessage1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 330, 20));

        empNumModifyLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        modifyPan.add(empNumModifyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 60, 20));

        getContentPane().add(modifyPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 450));

        loginPan.setMaximumSize(new java.awt.Dimension(600, 450));
        loginPan.setMinimumSize(new java.awt.Dimension(600, 450));
        loginPan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pleaseLoginLabel.setFont(new java.awt.Font("Segoe Script", 0, 26)); // NOI18N
        pleaseLoginLabel.setText("please login");
        loginPan.add(pleaseLoginLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 250, 90));

        usernameLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        usernameLabel.setText("Username");
        loginPan.add(usernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, -1, -1));

        passwordLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        passwordLabel.setText("Password");
        loginPan.add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, -1, -1));

        usernameInput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loginPan.add(usernameInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 90, -1));

        loginBut.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        loginBut.setText("Login");
        loginBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedLoginBut(evt);
            }
        });
        loginPan.add(loginBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 80, 30));

        loginCancelBut.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        loginCancelBut.setText("Cancel");
        loginCancelBut.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clickedCancelButFromLoginPan(evt);
            }
        });
        loginPan.add(loginCancelBut, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 280, 90, 30));
        loginPan.add(passwordInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 210, 90, 30));

        getContentPane().add(loginPan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 450));

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //this method allows, when clicked the add button from main panel, to show the add panel and set the other panels invisible.
    private void clickedAddFromMainPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedAddFromMainPan
    {//GEN-HEADEREND:event_clickedAddFromMainPan
        // TODO add your handling code here:
        mainPan.setVisible(false);
        addPan.setVisible(true);
        fullTimeInputsPan.setVisible(false);
        partTimeInputsPan.setVisible(false);
        empExistNotice.setVisible(false);
        saveSuccessNotice.setVisible(false);
        notFilledErrorMessage.setVisible(false);
        clearSelectionsInAdd();
    }//GEN-LAST:event_clickedAddFromMainPan

    //this method allows, when clicked the home button from add panel, to show the main panel and set the other panels invisible.
    private void clickedHomeButFromAddPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedHomeButFromAddPan
    {//GEN-HEADEREND:event_clickedHomeButFromAddPan
        // TODO add your handling code here:
        addPan.setVisible(false);
        mainPan.setVisible(true);
        clearSelectionsInAdd();
    }//GEN-LAST:event_clickedHomeButFromAddPan

    //to clear all the contents of the user input fields in add panel
    private void clearSelectionsInAdd()
    {
        empNumInput.setText(null);
        fNameInput.setText(null);
        lNameInput.setText(null);
        genderSelectionRadButGroup.clearSelection();
        workLocationDropdown.setSelectedIndex(0);
        empTypeSelectionRadButGroup.clearSelection();
        annualSalaryInput.setText(null);
        hourlyWageInput.setText(null);
        hoursPerWeekInput.setText(null);
        weeksPerYearInput.setText(null);
        deductionsRateInput.setText(null);
        fullTimeInputsPan.setVisible(false);
        partTimeInputsPan.setVisible(false);
    }

    //to clear all the contents of the items in modify panel
    private void clearSelectionsInModify()
    {
        empNumModifyLabel.setText(null);
        fNameInput1.setText(null);
        lNameInput1.setText(null);
        genderSelectionRadButGroup.clearSelection();
        workLocationDropdown1.setSelectedIndex(0);
        empTypeSelectionRadButGroup.clearSelection();
        annualSalaryInput1.setText(null);
        hourlyWageInput1.setText(null);
        hoursPerWeekInput1.setText(null);
        weeksPerYearInput1.setText(null);
        deductionsRateInput1.setText(null);
        partTimeInputsPan1.setVisible(false);
        fullTimeInputsPan1.setVisible(false);
    }

    //in add panel, to switch to the items to fill up panel of fulltime
    //make full time input fields appear when the user click the full time checkbox
    private void fullTimeRadButClicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fullTimeRadButClicked
    {//GEN-HEADEREND:event_fullTimeRadButClicked
        // TODO add your handling code here:
        fullTimeInputsPan.setVisible(false);
        partTimeInputsPan.setVisible(true);
    }//GEN-LAST:event_fullTimeRadButClicked

    //in add panel, make part time input fields appear when the user
    //click the part time checkbox
    private void partTimeRadButClicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_partTimeRadButClicked
    {//GEN-HEADEREND:event_partTimeRadButClicked
        // TODO add your handling code here:
        partTimeInputsPan.setVisible(false);
        fullTimeInputsPan.setVisible(true);
    }//GEN-LAST:event_partTimeRadButClicked

    //when clicked the cancel button from add panel, show the main panel
    private void clickedCanelButFromAddPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedCanelButFromAddPan
    {//GEN-HEADEREND:event_clickedCanelButFromAddPan
        // TODO add your handling code here:
        addPan.setVisible(false);
        mainPan.setVisible(true);
        clearSelectionsInAdd();
    }//GEN-LAST:event_clickedCanelButFromAddPan

    //when clicked the home button from remove panel, show the main panel
    private void homeButFromRemovePanclicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButFromRemovePanclicked
        // TODO add your handling code here:
        removePan.setVisible(false);
        mainPan.setVisible(true);
        setSize(600, 450);
    }//GEN-LAST:event_homeButFromRemovePanclicked

    //this method allows to show the information of the employee to search in a table
    private void clickedSearchButToRemove(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedSearchButToRemove
        // TODO add your handling code here:
        int tempEmpNum = Integer.parseInt(empNumRemoveSearchInput.getText());

        /*
        use the search method from hash table to get the employee
        and determine to show the not found message or the information of the employee
        */
        if (theTable.search(tempEmpNum) < 0)    //if the employee is not in the hash table, show the not found message
        {
            notFoundLabel.setVisible(true);
            removeResultPan.setVisible(false);
        } else  //if returned to the employee, then show the information of the employee
        {
            //to set the information display panel visible
            removeResultPan.setVisible(true);
            notFoundLabel.setVisible(false);
            removeSuccessNotice.setVisible(false);
            setSize(1280, 960);
            removePan.setSize(1280, 960);

            //create a table to display the informaiton
            
            //initiate the output table
            DefaultTableModel model = (DefaultTableModel) outPutTable1.getModel();
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--)
            {
                model.removeRow(i);     //clear the table so it can display fresh info
            }
            
            //to get attributes value from the employee
            int a = theTable.calcBuckets(tempEmpNum);
            int b = theTable.search(tempEmpNum);

            if (theTable.getBuckets()[a].get(b) instanceof FullTimeEmployee)
            {
                //to get the fulltime employee from the hash table
                FullTimeEmployee realFullTimeEmp = (FullTimeEmployee) theTable.getBuckets()[a].get(b);
                String sexOutput = null;
                String workLocOutput = null;
                
                //use the employee variable to set the output information in the table
                if (realFullTimeEmp.getSex() == 0)
                {
                    sexOutput = "Male";
                } else if (realFullTimeEmp.getSex() == 1)
                {
                    sexOutput = "Female";
                } else if (realFullTimeEmp.getSex() == 2)
                {
                    sexOutput = "Other";
                }
                if (realFullTimeEmp.getWorkLocation() == 0)
                {
                    workLocOutput = "Mississauga";
                } else if (realFullTimeEmp.getWorkLocation() == 1)
                {
                    workLocOutput = "Ottawa";
                } else if (realFullTimeEmp.getWorkLocation() == 2)
                {
                    workLocOutput = "Chicago";
                }
                
                DecimalFormat df = new DecimalFormat("#0.00");
                String formattedIncome = df.format(realFullTimeEmp.calcAnnualIncome());
                String formattedDedRate = df.format(realFullTimeEmp.getDeductionsRate() * 100);
                
                model.addRow(new Object[]
                {
                    realFullTimeEmp.getEmpNum(), realFullTimeEmp.getFirstName(), realFullTimeEmp.getLastName(),
                    sexOutput, workLocOutput, formattedDedRate + "%", "*", "-", realFullTimeEmp.getAnnualSalary(), "-", "-", "-", formattedIncome
                });
            } else if (theTable.getBuckets()[a].get(b) instanceof PartTimeEmployee)
            {
                //to get the parttime employee from the hash table
                PartTimeEmployee realPartTimeEmp = (PartTimeEmployee) theTable.getBuckets()[a].get(b);
                String sexOutput = null;
                String workLocOutput = null;
                
                //use the employee variable to set the output information in the table
                if (realPartTimeEmp.getSex() == 0)
                {
                    sexOutput = "Male";
                } else if (realPartTimeEmp.getSex() == 1)
                {
                    sexOutput = "Female";
                } else if (realPartTimeEmp.getSex() == 2)
                {
                    sexOutput = "Other";
                }
                if (realPartTimeEmp.getWorkLocation() == 0)
                {
                    workLocOutput = "Mississauga";
                } else if (realPartTimeEmp.getWorkLocation() == 1)
                {
                    workLocOutput = "Ottawa";
                } else if (realPartTimeEmp.getWorkLocation() == 2)
                {
                    workLocOutput = "Chicago";
                }
                DecimalFormat df = new DecimalFormat("#0.00");
                String formattedIncome = df.format(realPartTimeEmp.calcAnnualIncome());
                String formattedDedRate = df.format(realPartTimeEmp.getDeductionsRate() * 100);
                model.addRow(new Object[]
                {
                    realPartTimeEmp.getEmpNum(), realPartTimeEmp.getFirstName(), realPartTimeEmp.getLastName(),
                    sexOutput, workLocOutput, formattedDedRate + "%", "-", "*", "-", realPartTimeEmp.getHourlyWage(), realPartTimeEmp.getHoursPerWeek(),
                    realPartTimeEmp.getWeeksPerYear(), formattedIncome
                });
            }
        }
    }//GEN-LAST:event_clickedSearchButToRemove

    //clicked the exit button in main panel to exit the program
    private void clickedExitButFromMainPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedExitButFromMainPan
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_clickedExitButFromMainPan

    //click exit button in add panel to exit the program
    private void exitBut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBut1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBut1ActionPerformed

    //click exit button in remove panel to exit the program
    private void exitBut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBut2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBut2ActionPerformed

    //click the remove button in main panel to show the remove panel and set the other panel invisible
    private void clickedRemoveFromMainPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedRemoveFromMainPan
        // TODO add your handling code here:
        removePan.setVisible(true);
        mainPan.setVisible(false);
        notFoundLabel.setVisible(false);
        removeResultPan.setVisible(false);
        searchPan.setVisible(false);
        empNumRemoveSearchInput.setText(null);
        removeSuccessNotice.setVisible(false);
    }//GEN-LAST:event_clickedRemoveFromMainPan

    //this method will add the corrected filled up employee into the hash table
    private void clickedSaveButFromAddPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedSaveButFromAddPan
    {//GEN-HEADEREND:event_clickedSaveButFromAddPan
        // TODO add your handling code here:
        try
        {
            //to get the information the user gives
            int tempEmpNum = Integer.parseInt(empNumInput.getText());
            String tempFName = fNameInput.getText();
            String tempLName = lNameInput.getText();
            int tempSex = 0;
            if (maleRadBut.isSelected() == true)
            {
                tempSex = 0;
            } else if (femaleRadBut.isSelected() == true)
            {
                tempSex = 1;
            } else if (otherRadBut.isSelected() == true)
            {
                tempSex = 2;
            }
            int tempWorkLocation = 0;
            if (workLocationDropdown.getSelectedIndex() == 1)
            {
                tempWorkLocation = 0;
            } else if (workLocationDropdown.getSelectedIndex() == 2)
            {
                tempWorkLocation = 1;
            } else if (workLocationDropdown.getSelectedIndex() == 3)
            {
                tempWorkLocation = 2;
            } else if (workLocationDropdown.getSelectedIndex() == 0)
            {
                notFilledErrorMessage.setVisible(true);
                return;
            }
            double tempDeductionsRate = Double.parseDouble(deductionsRateInput.getText()) / 100;
            if (tempDeductionsRate > 1)
            {
                notFilledErrorMessage.setVisible(true);
                return;
            }
            double tempAnnualSalary = 0;
            double tempHourlyWage = 0;
            int tempHoursPerWeek = 0;
            int tempWeeksPerYear = 0;

            //to check if the employee is in the hash table, if not, then add the employee into the hash table
            if (theTable.search(tempEmpNum) == -1)
            {
                //diffetiate the fulltime employee and parttime employee
                if (fullTimeRadBut.isSelected() == true)
                {
                    tempAnnualSalary = Double.parseDouble(annualSalaryInput.getText());
                } else if (partTimeRadBut.isSelected() == true)
                {
                    tempHourlyWage = Double.parseDouble(hourlyWageInput.getText());
                    tempHoursPerWeek = Integer.parseInt(hoursPerWeekInput.getText());
                    tempWeeksPerYear = Integer.parseInt(weeksPerYearInput.getText());
                    if (tempHoursPerWeek >= 168 || tempWeeksPerYear >= 52)
                    {
                        notFilledErrorMessage.setVisible(true);
                        return;
                    }
                }
                FullTimeEmployee tempFullEmp = new FullTimeEmployee(tempEmpNum, tempFName, tempLName, tempSex, tempWorkLocation, tempDeductionsRate, tempAnnualSalary);
                PartTimeEmployee tempPartEmp = new PartTimeEmployee(tempEmpNum, tempFName, tempLName, tempSex, tempWorkLocation, tempDeductionsRate, tempHourlyWage, tempHoursPerWeek, tempWeeksPerYear);

                if (fullTimeRadBut.isSelected() == true)
                {
                    theTable.add(tempFullEmp);
                    saveSuccessNotice.setVisible(true);
                } else if (partTimeRadBut.isSelected() == true)
                {
                    theTable.add(tempPartEmp);
                }
                empExistNotice.setVisible(false);
                saveSuccessNotice.setVisible(true);
                clearSelectionsInAdd();
            } else
            {
                saveSuccessNotice.setVisible(false);
                empExistNotice.setVisible(true);
                clearSelectionsInAdd();
            }
            
            notFilledErrorMessage.setVisible(false);

        } catch (NumberFormatException e)
        {
            //if any item is not corrected filled up, show the error message and do not add the employee into the hash table
            notFilledErrorMessage.setVisible(true);
        }
        
        //for programmers to see what is in the hash table
        theTable.displayContents();
    }//GEN-LAST:event_clickedSaveButFromAddPan


    //click home button in search panel to show the main panel
    private void clickedHomeButFromSearchPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedHomeButFromSearchPan
        // TODO add your handling code here:
        searchPan.setVisible(false);
        mainPan.setVisible(true);
        setSize(600, 470);
    }//GEN-LAST:event_clickedHomeButFromSearchPan

    //this method allows to show the information of an employee whose number get from the user in a table 
    private void clickedSearchButFromSearchPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedSearchButFromSearchPan
        // TODO add your handling code here:
        
        //to get the employee number the user gives
        int tempEmpNumInput = Integer.parseInt(empNumSearchInput.getText());
        
        //if the employee is not in the table, an error message will show up
        if (theTable.search(tempEmpNumInput) < 0)
        {
            notFoundLabelSearchPan.setVisible(true);
        } 
        //if the employee is in the table, then create a table displaying the information
        else
        {
            searchResultPan.setVisible(true);
            notFoundLabelSearchPan.setVisible(false);
            setSize(1280, 960);
            searchPan.setSize(1280, 960);

            //initiate a table
            DefaultTableModel model = (DefaultTableModel) outPutTable2.getModel();
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--)
            {
                model.removeRow(i);
            }
            int a = theTable.calcBuckets(tempEmpNumInput);
            int b = theTable.search(tempEmpNumInput);

            //differentiate fulltime employee from parttime employee
            if (theTable.getBuckets()[a].get(b) instanceof FullTimeEmployee)
            {
                FullTimeEmployee realFullTimeEmp = (FullTimeEmployee) theTable.getBuckets()[a].get(b);
                String sexOutput = null;
                String workLocOutput = null;
                if (realFullTimeEmp.getSex() == 0)
                {
                    sexOutput = "Male";
                } else if (realFullTimeEmp.getSex() == 1)
                {
                    sexOutput = "Female";
                } else if (realFullTimeEmp.getSex() == 2)
                {
                    sexOutput = "Other";
                }
                if (realFullTimeEmp.getWorkLocation() == 0)
                {
                    workLocOutput = "Mississauga";
                } else if (realFullTimeEmp.getWorkLocation() == 1)
                {
                    workLocOutput = "Ottawa";
                } else if (realFullTimeEmp.getWorkLocation() == 2)
                {
                    workLocOutput = "Chicago";
                }
                
                DecimalFormat df = new DecimalFormat("#0.00");
                String formattedIncome = df.format(realFullTimeEmp.calcAnnualIncome());
                String formattedDedRate = df.format(realFullTimeEmp.getDeductionsRate() * 100);
                
                //here display everything formatted in the output table
                model.addRow(new Object[]
                {
                    realFullTimeEmp.getEmpNum(), realFullTimeEmp.getFirstName(), realFullTimeEmp.getLastName(),
                    sexOutput, workLocOutput, formattedDedRate + "%", "*", "-", realFullTimeEmp.getAnnualSalary(), "-", "-", "-", formattedIncome
                });
            } else if (theTable.getBuckets()[a].get(b) instanceof PartTimeEmployee)
            {
                PartTimeEmployee realPartTimeEmp = (PartTimeEmployee) theTable.getBuckets()[a].get(b);
                String sexOutput = null;
                String workLocOutput = null;
                if (realPartTimeEmp.getSex() == 0)
                {
                    sexOutput = "Male";
                } else if (realPartTimeEmp.getSex() == 1)
                {
                    sexOutput = "Female";
                } else if (realPartTimeEmp.getSex() == 2)
                {
                    sexOutput = "Other";
                }
                if (realPartTimeEmp.getWorkLocation() == 0)
                {
                    workLocOutput = "Mississauga";
                } else if (realPartTimeEmp.getWorkLocation() == 1)
                {
                    workLocOutput = "Ottawa";
                } else if (realPartTimeEmp.getWorkLocation() == 2)
                {
                    workLocOutput = "Chicago";
                }
                DecimalFormat df = new DecimalFormat("#0.00");
                String formattedIncome = df.format(realPartTimeEmp.calcAnnualIncome());
                String formattedDedRate = df.format(realPartTimeEmp.getDeductionsRate() * 100);
                
                //here display everything formatted in the output table
                model.addRow(new Object[]
                {
                    realPartTimeEmp.getEmpNum(), realPartTimeEmp.getFirstName(), realPartTimeEmp.getLastName(),
                    sexOutput, workLocOutput, formattedDedRate + "%", "-", "*", "-", realPartTimeEmp.getHourlyWage(), realPartTimeEmp.getHoursPerWeek(),
                    realPartTimeEmp.getWeeksPerYear(), formattedIncome
                });
            }
        }
    }//GEN-LAST:event_clickedSearchButFromSearchPan

    //when the exit button from search panel is clicked, it will exit the system
    private void exitBut3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBut3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBut3ActionPerformed

    //when search button is clicked from main panel, switch to search panel
    private void clickedSearchButFromMainPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedSearchButFromMainPan
        // TODO add your handling code here:
        mainPan.setVisible(false);
        searchPan.setVisible(true);
        searchResultPan.setVisible(false);
        notFoundLabelSearchPan.setVisible(false);
        empNumSearchInput.setText(null);
    }//GEN-LAST:event_clickedSearchButFromMainPan

    //when display button is clicked from main panel, show display panel
    //and display all the employees in the hash table
    private void clickedDisplayButFromMainPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedDisplayButFromMainPan
        // TODO add your handling code here:
        
        //show the display panel
        mainPan.setVisible(false);
        setSize(1280, 960);
        displayPan.setSize(1280, 960);
        displayPan.setVisible(true);

        //create a table
        DefaultTableModel model = (DefaultTableModel) outPutTable.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--)
        {
            model.removeRow(i);
        }
        //nested for loop to go through each bucket, and items hanging off it
        for (int a = 0; a < theTable.getBuckets().length; a++)
        {
            for (int b = 0; b < theTable.getBuckets()[a].size(); b++)
            {   //used "instanceof" operator to check whether it's part time or full time
                if (theTable.getBuckets()[a].get(b) instanceof FullTimeEmployee)
                {
                    FullTimeEmployee realFullTimeEmp = (FullTimeEmployee) theTable.getBuckets()[a].get(b);
                    String sexOutput = null;
                    String workLocOutput = null;
                    if (realFullTimeEmp.getSex() == 0)
                    {
                        sexOutput = "Male";
                    } else if (realFullTimeEmp.getSex() == 1)
                    {
                        sexOutput = "Female";
                    } else if (realFullTimeEmp.getSex() == 2)
                    {
                        sexOutput = "Other";
                    }
                    if (realFullTimeEmp.getWorkLocation() == 0)
                    {
                        workLocOutput = "Mississauga";
                    } else if (realFullTimeEmp.getWorkLocation() == 1)
                    {
                        workLocOutput = "Ottawa";
                    } else if (realFullTimeEmp.getWorkLocation() == 2)
                    {
                        workLocOutput = "Chicago";
                    }
                    DecimalFormat df = new DecimalFormat("#0.00");
                    String formattedIncome = df.format(realFullTimeEmp.calcAnnualIncome());
                    String formattedDedRate = df.format(realFullTimeEmp.getDeductionsRate()*100);
                    
                    //here display everything formatted in the output table
                    model.addRow(new Object[]
                    {
                        realFullTimeEmp.getEmpNum(), realFullTimeEmp.getFirstName(), realFullTimeEmp.getLastName(),
                        sexOutput, workLocOutput, formattedDedRate + "%", "*", "-", realFullTimeEmp.getAnnualSalary(), "-", "-", "-", formattedIncome
                    });
                } else if (theTable.getBuckets()[a].get(b) instanceof PartTimeEmployee)
                {
                    PartTimeEmployee realPartTimeEmp = (PartTimeEmployee) theTable.getBuckets()[a].get(b);
                    String sexOutput = null;
                    String workLocOutput = null;
                    if (realPartTimeEmp.getSex() == 0)
                    {
                        sexOutput = "Male";
                    } else if (realPartTimeEmp.getSex() == 1)
                    {
                        sexOutput = "Female";
                    } else if (realPartTimeEmp.getSex() == 2)
                    {
                        sexOutput = "Other";
                    }
                    if (realPartTimeEmp.getWorkLocation() == 0)
                    {
                        workLocOutput = "Mississauga";
                    } else if (realPartTimeEmp.getWorkLocation() == 1)
                    {
                        workLocOutput = "Ottawa";
                    } else if (realPartTimeEmp.getWorkLocation() == 2)
                    {
                        workLocOutput = "Chicago";
                    }
                    DecimalFormat df = new DecimalFormat("#0.00");
                    String formattedIncome = df.format(realPartTimeEmp.calcAnnualIncome());
                    String formattedDedRate = df.format(realPartTimeEmp.getDeductionsRate()*100);
                    model.addRow(new Object[]
                    {
                        realPartTimeEmp.getEmpNum(), realPartTimeEmp.getFirstName(), realPartTimeEmp.getLastName(),
                        sexOutput, workLocOutput, formattedDedRate + "%", "-", "*", "-", realPartTimeEmp.getHourlyWage(), realPartTimeEmp.getHoursPerWeek(),
                        realPartTimeEmp.getWeeksPerYear(), formattedIncome
                    });
                }
            }
        }


    }//GEN-LAST:event_clickedDisplayButFromMainPan

    private void exitBut4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitBut4ActionPerformed
    {//GEN-HEADEREND:event_exitBut4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBut4ActionPerformed
    //return to home screen when the button is pressed
    private void clickedHomeButFromDisplayPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedHomeButFromDisplayPan
    {//GEN-HEADEREND:event_clickedHomeButFromDisplayPan
        // TODO add your handling code here:
        displayPan.setVisible(false);
        setSize(600, 470);
        mainPan.setVisible(true);
    }//GEN-LAST:event_clickedHomeButFromDisplayPan

    //remove the employee the user specified in the hash table
    private void clickedYesButFromRemovePan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedYesButFromRemovePan
        // TODO add your handling code here:
        int tempEmpNumInput = Integer.parseInt(empNumRemoveSearchInput.getText());
        theTable.remove(tempEmpNumInput); //call remove method in OpenHashTable class
        notFoundLabel.setVisible(false);
        removeResultPan.setVisible(false);
        removeSuccessNotice.setVisible(true);
    }//GEN-LAST:event_clickedYesButFromRemovePan

    //it will not remove the employee and go back to the search part
    private void clickedNoButFromRemovePan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedNoButFromRemovePan
        // TODO add your handling code here:
        notFoundLabel.setVisible(false);
        removeResultPan.setVisible(false);
    }//GEN-LAST:event_clickedNoButFromRemovePan

    //when load button from main screen is clicked, retrieve the information in
    //the archieve file into the hash table
    private void clickedLoadButFromMainPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedLoadButFromMainPan
    {//GEN-HEADEREND:event_clickedLoadButFromMainPan
        // TODO add your handling code here:
        BufferedReader reader;   //used BufferedReader class
        try
        {   //first remove everything in the hash table to avoid errors
            //as the employees are going to be replaced by the ones in the archieve file
            for (int a = 0; a < theTable.getBuckets().length; a++)  
        {
            for (int b = 0; b < theTable.getBuckets()[a].size(); b++)   
            {
                theTable.remove(theTable.getBuckets()[a].get(b).getEmpNum());
            }
        }
            //read from the specified text file in the root directory
            reader = new BufferedReader(new FileReader(".\\SavedEmployeeData.txt"));
            String line;
            while ((line = reader.readLine()) != null) //while it's not the end of file
            {                                    //read information
                String[] oneEmp = line.split(";");   //used split to seperate the fields for an employee
                int empNumForInput = Integer.parseInt(oneEmp[1]);
                String fNameForInput = oneEmp[2];
                String lNameForInput = oneEmp[3];
                int sexCodeForInput = Integer.parseInt(oneEmp[4]);
                int worklocCodeForInput = Integer.parseInt(oneEmp[5]);
                double dedRateForInput = Double.parseDouble(oneEmp[6]);

                if ("F".equals(oneEmp[0]))    //check the first letter of the employee info which indicates the emp type
                {                        //pass in the correct parameters to add the employee into hash table
                    double annualSalForInput = Double.parseDouble(oneEmp[7]);
                    FullTimeEmployee fullTimeInput = new FullTimeEmployee(empNumForInput, fNameForInput, lNameForInput, sexCodeForInput,
                            worklocCodeForInput, dedRateForInput, annualSalForInput);
                    theTable.add(fullTimeInput);
                } else if ("P".equals(oneEmp[0]))
                {
                    double hrlyWageForInput = Double.parseDouble(oneEmp[7]);
                    double hrsPerWeekForInput = Double.parseDouble(oneEmp[8]);
                    double weeksPerYr = Double.parseDouble(oneEmp[9]);
                    PartTimeEmployee partTimeInput = new PartTimeEmployee(empNumForInput, fNameForInput, lNameForInput, sexCodeForInput,
                            worklocCodeForInput, dedRateForInput, hrlyWageForInput, hrsPerWeekForInput, weeksPerYr);
                    theTable.add(partTimeInput);
                }
            }
            loadSuccessNotice.setVisible(true);    //when all the employees from text files are imported, give the user a notice
        } catch (FileNotFoundException ex)
        {
            errorInFileNoticeLabel.setVisible(true);
        } catch (IOException ex)   //if any errors occur in the process, give error message to the user
        {
            errorInFileNoticeLabel.setVisible(true);
        }

    }//GEN-LAST:event_clickedLoadButFromMainPan

    private void exitBut5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBut5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBut5ActionPerformed

    private void clickedHomeButFromModifyPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedHomeButFromModifyPan
        // TODO add your handling code here:
        modifyPan.setVisible(false);
        mainPan.setVisible(true);
    }//GEN-LAST:event_clickedHomeButFromModifyPan

    //save button in modify panel, do the same thing as save button in add panel
    //except that it deletes the employee first then add in the modified one
    private void clickedSaveButFromModifyPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedSaveButFromModifyPan
        // TODO add your handling code here:
        try
        {
            int tempEmpNum = Integer.parseInt(empNumModifyLabel.getText());
            String tempFName = fNameInput1.getText();
            String tempLName = lNameInput1.getText();
            int tempSex = 0;
            if (maleRadBut1.isSelected() == true)
            {
                tempSex = 0;
            } else if (femaleRadBut1.isSelected() == true)
            {
                tempSex = 1;
            } else if (otherRadBut1.isSelected() == true)
            {
                tempSex = 2;
            }
            int tempWorkLocation = 0;
            if (workLocationDropdown1.getSelectedIndex() == 1)
            {
                tempWorkLocation = 0;
            } else if (workLocationDropdown1.getSelectedIndex() == 2)
            {
                tempWorkLocation = 1;
            } else if (workLocationDropdown1.getSelectedIndex() == 3)
            {
                tempWorkLocation = 2;
            } else if (workLocationDropdown1.getSelectedIndex() == 0)
            {
                notFilledErrorMessage1.setVisible(true);
                return;
            }
            double tempDeductionsRate = Double.parseDouble(deductionsRateInput1.getText()) / 100;
            if (tempDeductionsRate > 1)
            {
                notFilledErrorMessage1.setVisible(true);
                return;
            }
            double tempAnnualSalary = 0;
            double tempHourlyWage = 0;
            double tempHoursPerWeek = 0;
            double tempWeeksPerYear = 0;
            theTable.remove(tempEmpNum);  //removes the employee that is going to be modified

            if (theTable.search(tempEmpNum) == -1)
            {
                if (fullTimeRadBut1.isSelected() == true)
                {
                    tempAnnualSalary = Double.parseDouble(annualSalaryInput1.getText());
                } else if (partTimeRadBut1.isSelected() == true)
                {
                    tempHourlyWage = Double.parseDouble(hourlyWageInput1.getText());
                    tempHoursPerWeek = Double.parseDouble(hoursPerWeekInput1.getText());
                    tempWeeksPerYear = Double.parseDouble(weeksPerYearInput1.getText());
                    if (tempHoursPerWeek >= 168 || tempWeeksPerYear >= 52)
                    {
                        notFilledErrorMessage1.setVisible(true);
                        return;
                    }
                }
                FullTimeEmployee tempFullEmp = new FullTimeEmployee(tempEmpNum, tempFName, tempLName, tempSex, tempWorkLocation, tempDeductionsRate, tempAnnualSalary);
                PartTimeEmployee tempPartEmp = new PartTimeEmployee(tempEmpNum, tempFName, tempLName, tempSex, tempWorkLocation, tempDeductionsRate, tempHourlyWage, tempHoursPerWeek, tempWeeksPerYear);

                if (fullTimeRadBut1.isSelected() == true)
                {
                    theTable.add(tempFullEmp);
                    saveSuccessNotice1.setVisible(true);
                } else if (partTimeRadBut1.isSelected() == true)
                {
                    theTable.add(tempPartEmp);
                    saveSuccessNotice1.setVisible(true);
                }
                empExistNotice1.setVisible(false);
            } else
            {
                saveSuccessNotice1.setVisible(false);
                empExistNotice1.setVisible(true);
            }
            notFilledErrorMessage1.setVisible(false);
        } catch (NumberFormatException e)
        {
            notFilledErrorMessage1.setVisible(true);
        }

        theTable.displayContents();

        saveSuccessNotice1.setVisible(true);

    }//GEN-LAST:event_clickedSaveButFromModifyPan

    //if cancel button from modify panel is clicked, don't modify the employee
    //then return back to the display panel
    private void clickedCancelButFromModifyPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedCancelButFromModifyPan
        // TODO add your handling code here:
        modifyPan.setVisible(false);
        displayPan.setVisible(true);
        setSize(1280, 960);
    }//GEN-LAST:event_clickedCancelButFromModifyPan

    private void exitBut6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBut6ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBut6ActionPerformed

    //when double click on a specific employee in the display table,
    //the modify panel will show up, allowing the user to change info of the employee
    private void outPutTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outPutTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2)   //double clicked
        {
            JTable outPutTable = (JTable) evt.getSource();
            int row = outPutTable.getSelectedRow();
            int empNumFromTable = Integer.parseInt(outPutTable.getModel().getValueAt(row, 0).toString());
            int buc = theTable.calcBuckets(empNumFromTable);
            int loc = theTable.search(empNumFromTable);
            clearSelectionsInModify();    
            //get info of the employee from table, fill it back into modify panel
            empNumModifyLabel.setText(Integer.toString(empNumFromTable));
            fNameInput1.setText(theTable.getBuckets()[buc].get(loc).getFirstName());
            lNameInput1.setText(theTable.getBuckets()[buc].get(loc).getLastName());
            switch (theTable.getBuckets()[buc].get(loc).getSex())
            {
                case 0:
                    maleRadBut1.setSelected(true);
                    break;
                case 1:
                    femaleRadBut1.setSelected(true);
                    break;
                case 2:
                    otherRadBut1.setSelected(true);
                    break;
                default:
                    break;
            }

            if (theTable.getBuckets()[buc].get(loc).getWorkLocation() == 0)
            {
                workLocationDropdown1.setSelectedIndex(1);
            } else if (theTable.getBuckets()[buc].get(loc).getWorkLocation() == 1)
            {
                workLocationDropdown1.setSelectedIndex(2);
            } else if (theTable.getBuckets()[buc].get(loc).getWorkLocation() == 2)
            {
                workLocationDropdown1.setSelectedIndex(3);
            }

            if (theTable.getBuckets()[buc].get(loc) instanceof FullTimeEmployee)
            {
                FullTimeEmployee fullForChange = (FullTimeEmployee) theTable.getBuckets()[buc].get(loc);
                fullTimeRadBut1.setSelected(true);
                fullTimeInputsPan1.setVisible(true);
                partTimeInputsPan1.setVisible(false);
                annualSalaryInput1.setText(Double.toString(fullForChange.getAnnualSalary()));
                deductionsRateInput1.setText(Double.toString(fullForChange.getDeductionsRate() * 100));
            } else if (theTable.getBuckets()[buc].get(loc) instanceof PartTimeEmployee)
            {
                PartTimeEmployee partForChange = (PartTimeEmployee) theTable.getBuckets()[buc].get(loc);
                partTimeRadBut1.setSelected(true);
                fullTimeInputsPan1.setVisible(false);
                partTimeInputsPan1.setVisible(true);
                hourlyWageInput1.setText(Double.toString(partForChange.getHourlyWage()));
                hoursPerWeekInput1.setText(Double.toString(partForChange.getHoursPerWeek()));
                weeksPerYearInput1.setText(Double.toString(partForChange.getWeeksPerYear()));
                deductionsRateInput1.setText(Double.toString(partForChange.getDeductionsRate() * 100));
            }

            //to show the modify panel
            displayPan.setVisible(false);
            modifyPan.setVisible(true);
            setSize(600, 470);
            saveSuccessNotice1.setVisible(false);
            empExistNotice1.setVisible(false);
            notFilledErrorMessage1.setVisible(false);
        }
    }//GEN-LAST:event_outPutTableMouseClicked

    //when save button from main screen is clicked, save the employee info that's currently
    //in the hash table, to a text file under root directory
    private void clickedSaveButActionFromMainPan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedSaveButActionFromMainPan
        // TODO add your handling code here:
        try
        {
            BufferedWriter writer;      //used BufferedWriter class
            writer = new BufferedWriter(new FileWriter(".\\SavedEmployeeData.txt"));   //create a text file under the root directory
            for (int x = 0; x < theTable.getBuckets().length; x++)          //use nested for loop to go through the buckets, and arraylist items
            {                                                               //within it
                for (int y = 0; y < theTable.getBuckets()[x].size(); y++)
                {                                                           //used displayOneEmp method fromd OpenHashTable class
                    writer.write(theTable.displayOneEmp(theTable.getBuckets()[x].get(y).getEmpNum()));
                    writer.newLine();                                       //new line for every employee
                }
            }
            writer.close();
        } catch (IOException ex)
        {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        savedSuccessNotice.setVisible(true);
        loadSuccessNotice.setVisible(false);
    }//GEN-LAST:event_clickedSaveButActionFromMainPan

    //when the login button is clicked on the login panel, do the following
    private void clickedLoginBut(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedLoginBut
    {//GEN-HEADEREND:event_clickedLoginBut
        // TODO add your handling code here:
        String pas = new String(passwordInput.getPassword());        //check to see that username and password matches
        if (usernameInput.getText().equals("Hello") && pas.equals("World"))
        {                                                      //if it is, give a dialog box and switch to main panel
            JOptionPane.showMessageDialog(null, "Login Successful" + System.lineSeparator()
                    + "Welcome to the Employee Database System!");
            loginPan.setVisible(false);
            mainPan.setVisible(true);
        } else
        {                                                //or else reject the login, stay on login panel
            JOptionPane.showMessageDialog(null, "Login Failed" + System.lineSeparator()
                    + "Please try again with valid username and password");
        }
    }//GEN-LAST:event_clickedLoginBut

    private void clickedCancelButFromLoginPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedCancelButFromLoginPan
    {//GEN-HEADEREND:event_clickedCancelButFromLoginPan
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_clickedCancelButFromLoginPan

    //to avoid confusion to the user, when mouse exit the save button, the saveSuccessNotice disappear
    private void mouseExitSaveButAddPan(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseExitSaveButAddPan
        // TODO add your handling code here:
        try
        {
            Thread.sleep(500);
            saveSuccessNotice.setVisible(false);
            empExistNotice.setVisible(false);
        } catch (InterruptedException ex)
        {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mouseExitSaveButAddPan

    //similar to add panel, the full time and part time panels change visibilities when the radio button is clicked
    private void clickedFullTimeRadBut1FromModifyPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedFullTimeRadBut1FromModifyPan
    {//GEN-HEADEREND:event_clickedFullTimeRadBut1FromModifyPan
        // TODO add your handling code here:
        partTimeInputsPan1.setVisible(false);
        fullTimeInputsPan1.setVisible(true);
    }//GEN-LAST:event_clickedFullTimeRadBut1FromModifyPan

    private void clickedPartTimeRadButFromModifyPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedPartTimeRadButFromModifyPan
    {//GEN-HEADEREND:event_clickedPartTimeRadButFromModifyPan
        // TODO add your handling code here:
        fullTimeInputsPan1.setVisible(false);
        partTimeInputsPan1.setVisible(true);
    }//GEN-LAST:event_clickedPartTimeRadButFromModifyPan

    //when help button is clicked from main panel, open the word(.docx) document under root directory
    //which is the user guide written for this program
    private void clickedHelpFromMainPan(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clickedHelpFromMainPan
    {//GEN-HEADEREND:event_clickedHelpFromMainPan
        try
        {
            // TODO add your handling code here:
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+".\\User Guide.pdf");
        } catch (IOException ex)
        {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clickedHelpFromMainPan

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton addBut;
    private javax.swing.JPanel addPan;
    private javax.swing.JLabel addTitle;
    private javax.swing.JFormattedTextField annualSalaryInput;
    private javax.swing.JFormattedTextField annualSalaryInput1;
    private javax.swing.JLabel annualSalaryLabel;
    private javax.swing.JLabel annualSalaryLabel1;
    private javax.swing.JButton cancelButFromAddPan;
    private javax.swing.JButton cancelButFromAddPan1;
    private javax.swing.JFormattedTextField deductionsRateInput;
    private javax.swing.JFormattedTextField deductionsRateInput1;
    private javax.swing.JLabel deductionsRateLabel;
    private javax.swing.JLabel deductionsRateLabel1;
    private javax.swing.JLabel diaplayTitle;
    private javax.swing.JButton displayBut;
    private javax.swing.JPanel displayPan;
    private javax.swing.JLabel empExistNotice;
    private javax.swing.JLabel empExistNotice1;
    private javax.swing.JFormattedTextField empNumInput;
    private javax.swing.JLabel empNumLabel;
    private javax.swing.JLabel empNumLabel1;
    private javax.swing.JLabel empNumModifyLabel;
    private javax.swing.JTextField empNumRemoveSearchInput;
    private javax.swing.JTextField empNumSearchInput;
    private javax.swing.ButtonGroup empTypeSelectionRadButGroup;
    private javax.swing.JLabel employeeNumberLabel;
    private javax.swing.JLabel employeeNumberLabel1;
    private javax.swing.JLabel employeeTypeLabel;
    private javax.swing.JLabel employeeTypeLabel1;
    private javax.swing.JLabel errorInFileNoticeLabel;
    private javax.swing.JButton exitBut;
    private javax.swing.JButton exitBut1;
    private javax.swing.JButton exitBut2;
    private javax.swing.JButton exitBut3;
    private javax.swing.JButton exitBut4;
    private javax.swing.JButton exitBut5;
    private javax.swing.JButton exitBut6;
    private javax.swing.JTextField fNameInput;
    private javax.swing.JTextField fNameInput1;
    private javax.swing.JLabel fNameLabel;
    private javax.swing.JLabel fNameLabel1;
    private javax.swing.JRadioButton femaleRadBut;
    private javax.swing.JRadioButton femaleRadBut1;
    private javax.swing.JPanel fullTimeInputsPan;
    private javax.swing.JPanel fullTimeInputsPan1;
    private javax.swing.JRadioButton fullTimeRadBut;
    private javax.swing.JRadioButton fullTimeRadBut1;
    private javax.swing.ButtonGroup genderSelectionRadButGroup;
    private javax.swing.JButton homeButFromAddPan;
    private javax.swing.JButton homeButFromAddPan1;
    private javax.swing.JButton homeButFromRemovePan;
    private javax.swing.JButton homeButFromRemovePan1;
    private javax.swing.JButton homeButFromRemovePan2;
    private javax.swing.JFormattedTextField hourlyWageInput;
    private javax.swing.JFormattedTextField hourlyWageInput1;
    private javax.swing.JLabel hourlyWageLabel;
    private javax.swing.JLabel hourlyWageLabel1;
    private javax.swing.JFormattedTextField hoursPerWeekInput;
    private javax.swing.JFormattedTextField hoursPerWeekInput1;
    private javax.swing.JLabel hoursPerWeekLabel;
    private javax.swing.JLabel hoursPerWeekLabel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField lNameInput;
    private javax.swing.JTextField lNameInput1;
    private javax.swing.JLabel lNameLabel;
    private javax.swing.JLabel lNameLabel1;
    private javax.swing.JButton loadBut;
    private javax.swing.JLabel loadSuccessNotice;
    private javax.swing.JButton loginBut;
    private javax.swing.JButton loginCancelBut;
    private javax.swing.JPanel loginPan;
    private javax.swing.JPanel mainPan;
    private javax.swing.JRadioButton maleRadBut;
    private javax.swing.JRadioButton maleRadBut1;
    private javax.swing.JButton modifyBut;
    private javax.swing.JPanel modifyPan;
    private javax.swing.JLabel modifyTitle;
    private javax.swing.JLabel notFilledErrorMessage;
    private javax.swing.JLabel notFilledErrorMessage1;
    private javax.swing.JLabel notFoundLabel;
    private javax.swing.JLabel notFoundLabelSearchPan;
    private javax.swing.JLabel note2Label;
    private javax.swing.JLabel note2Label1;
    private javax.swing.JRadioButton otherRadBut;
    private javax.swing.JRadioButton otherRadBut1;
    private javax.swing.JTable outPutTable;
    private javax.swing.JTable outPutTable1;
    private javax.swing.JTable outPutTable2;
    private javax.swing.JPanel partTimeInputsPan;
    private javax.swing.JPanel partTimeInputsPan1;
    private javax.swing.JRadioButton partTimeRadBut;
    private javax.swing.JRadioButton partTimeRadBut1;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel percentSymbolLabel;
    private javax.swing.JLabel percentSymbolLabel1;
    private javax.swing.JLabel picture;
    private javax.swing.JLabel pleaseLoginLabel;
    private javax.swing.JButton removeBut;
    private javax.swing.JLabel removeConfirmLabel;
    private javax.swing.JButton removeNoBut;
    private javax.swing.JLabel removeNoteLabel;
    private javax.swing.JPanel removePan;
    private javax.swing.JPanel removeResultPan;
    private javax.swing.JLabel removeSuccessNotice;
    private javax.swing.JLabel removeTitle;
    private javax.swing.JButton removeYesBut;
    private javax.swing.JButton saveButFromAddPan;
    private javax.swing.JButton saveButFromAddPan1;
    private javax.swing.JLabel saveSuccessNotice;
    private javax.swing.JLabel saveSuccessNotice1;
    private javax.swing.JLabel savedSuccessNotice;
    private javax.swing.JButton searchBut;
    private javax.swing.JButton searchButToRemove;
    private javax.swing.JButton searchButToRemove1;
    private javax.swing.JLabel searchNoteLabel1;
    private javax.swing.JPanel searchPan;
    private javax.swing.JPanel searchResultPan;
    private javax.swing.JLabel searchTitle1;
    private javax.swing.JLabel sexLabel;
    private javax.swing.JLabel sexLabel1;
    private javax.swing.JTextField usernameInput;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JFormattedTextField weeksPerYearInput;
    private javax.swing.JFormattedTextField weeksPerYearInput1;
    private javax.swing.JLabel weeksPerYearLabel;
    private javax.swing.JLabel weeksPerYearLabel1;
    private javax.swing.JComboBox<String> workLocationDropdown;
    private javax.swing.JComboBox<String> workLocationDropdown1;
    private javax.swing.JLabel workLocationLabel;
    private javax.swing.JLabel workLocationLabel1;
    // End of variables declaration//GEN-END:variables
}
